@model SelectList
@{
    ViewData["Title"] = "Annual Sales Report";
}

<h2>@ViewData["Title"]</h2>

<!-- Dropdown to select year -->
<div class="form-group">
    <label for="year">Select Year:</label>
    <select id="year" name="year" class="form-control">
        <option value="">Select a Year...</option>
        @foreach (var year in Model)
        {
            <option value="@year.Value">@year.Text</option>
        }
    </select>
</div>

<hr />

<!-- Table for report data -->
<table id="reportTable" class="table table-bordered" style="display:none;">
    <thead>
        <tr>
            <th>Month</th>
            <th>Total Items</th>
            <th>Total Sales ($)</th>
        </tr>
    </thead>
    <tbody></tbody>
</table>

<div id="noDataMessage" style="display:none;">No data available for this year.</div>

<!-- D3 Bar Chart -->
<div>
    <svg width="100%" height="400px" class="border border-primary rounded p-2"></svg>
</div>

@section Scripts {
    <script type="module">
        import * as d3 from "https://cdn.jsdelivr.net/npm/d3@7/+esm";

        const svg = d3.select("svg");
        const svgWidth = svg.node().getBoundingClientRect().width;
        const svgHeight = svg.node().getBoundingClientRect().height;

        // Margins for axes
        const chartMargins = { top: 40, right: 25, bottom: 80, left: 50 };
        const width = svgWidth - chartMargins.left - chartMargins.right;
        const height = svgHeight - chartMargins.top - chartMargins.bottom;

        // Chart group
        const chartGroup = svg.append("g")
            .attr("class", "chartGroup")
            .attr("transform", `translate(${chartMargins.left}, ${chartMargins.top})`);

        function buildGraph(dataSet) {
            console.log("Building graph with data:", dataSet);

            if (!dataSet || dataSet.length === 0) {
                chartGroup.selectAll("*").remove();
                return;
            }

            chartGroup.selectAll("*").remove(); // clear previous graph

            const monthArray = Array.from(dataSet, d => d.monthName);

            // X scale
            const xScale = d3.scaleBand()
                .domain(monthArray)
                .range([0, width])
                .paddingInner(0.1);

            // Y scale
            const yScale = d3.scaleLinear()
                .domain([0, d3.max(dataSet, d => d.totalItems)])
                .nice()
                .range([height, 0]);

            // Y-Axis
            const yAxis = d3.axisLeft(yScale);
            chartGroup.append("g")
                .attr("class", "y-axis")
                .call(yAxis);

            // X-Axis
            const xAxis = d3.axisBottom(xScale);
            chartGroup.append("g")
                .attr("class", "x-axis")
                .attr("transform", `translate(0, ${height})`)
                .call(xAxis)
                .selectAll("text")
                .attr("transform", "rotate(-45)")
                .style("text-anchor", "end")
                .attr("dx", "-0.8em")
                .attr("dy", "0.15em");

            // Bars with animation
            chartGroup.selectAll(".bar")
                .data(dataSet)
                .enter()
                .append("rect")
                .attr("class", "bar")
                .attr("x", d => xScale(d.monthName))
                .attr("y", height) // start from bottom
                .attr("width", xScale.bandwidth())
                .attr("height", 0) // initial height zero for animation
                .attr("fill", d => d.totalItems === d3.max(dataSet, d => d.totalItems) ? "crimson" : "steelblue") // highlight max
                .transition()
                .duration(800)
                .delay((d, i) => i * 100)
                .attr("y", d => yScale(d.totalItems))
                .attr("height", d => height - yScale(d.totalItems));

            // Add text labels over bars
            chartGroup.selectAll(".bar-text")
                .data(dataSet)
                .enter()
                .append("text")
                .attr("class", "bar-text")
                .text(d => d.totalItems.toLocaleString())
                .attr("x", d => xScale(d.monthName) + xScale.bandwidth() / 2)
                .attr("y", height) // start at bottom for animation
                .attr("text-anchor", "middle")
                .attr("fill", "white")
                .style("font-size", "1em")
                .transition()
                .duration(800)
                .delay((d, i) => i * 100)
                .attr("y", d => yScale(d.totalItems) + 20); // position inside bar
        }

        // Dropdown event listener
        document.getElementById("year").addEventListener("change", function () {
            const year = this.value;
            const table = document.getElementById("reportTable");
            const tbody = table.querySelector("tbody");
            const noData = document.getElementById("noDataMessage");

            tbody.innerHTML = "";
            table.style.display = "none";
            noData.style.display = "none";

            if (!year) return;

            fetch(`/Reports/AnnualSalesReportData?year=${year}`)
                .then(response => {
                    if (!response.ok) throw new Error("Error fetching data");
                    return response.json();
                })
                .then(data => {
                    if (!data || data.length === 0) {
                        noData.style.display = "block";
                        chartGroup.selectAll("*").remove();
                    } else {
                        // Populate table
                        data.forEach(row => {
                            const tr = document.createElement("tr");
                            tr.innerHTML = `
                                        <td>${row.monthName}</td>
                                        <td>${row.totalItems}</td>
                                        <td>${row.totalSales.toFixed(2)}</td>
                                    `;
                            tbody.appendChild(tr);
                        });
                        table.style.display = "table";

                        // Build D3 graph
                        buildGraph(data);
                    }
                })
                .catch(err => {
                    console.error(err);
                    noData.style.display = "block";
                    chartGroup.selectAll("*").remove();
                });
        });
    </script>
}
